package com.westchestertabletennis.paymentgenerator.dao;

import com.westchestertabletennis.paymentgenerator.dto.DTO;
import com.westchestertabletennis.paymentgenerator.dto.PreparedStatementSetter;
import com.westchestertabletennis.paymentgenerator.dto.RowMapper;
import com.westchestertabletennis.paymentgenerator.dto.TournamentDTO;

import java.util.ArrayList;
import java.util.List;
import java.sql.*;
import java.util.Properties;

/**
 * Created with IntelliJ IDEA.
 * User: Maksym
 * Date: 7/4/13
 * Time: 9:31 PM
 * To change this template use File | Settings | File Templates.
 */
public class TournamentDAO {
    public List readAllTournaments() {
        return ConnectionUtil.readDTOs("SELECT * from tournament", new PreparedStatementSetter() {
                    @Override
                    public void doAllStuffNeededToPrepareStatement(PreparedStatement pstmt) throws SQLException {

                    }
                }, new RowMapper() {
                    @Override
                    public DTO createDTOFromResultSet(ResultSet result) throws Exception {
                        return new TournamentDTO().fromResultSet(result);
                    }
                }
        );
    }

    public TournamentDTO readTournamentByName(final String tournamentName) {
        return ConnectionUtil.readDTOsWithCreteria("SELECT id, tname, date, stars, deadline, policy, eligibility FROM tournament where tname=?", new PreparedStatementSetter() {
                    @Override
                    public void doAllStuffNeededToPrepareStatement(PreparedStatement pstmt) throws SQLException {
                        pstmt.setString(1, tournamentName);
                    }
                }, new RowMapper() {
                    @Override
                    public DTO createDTOFromResultSet(ResultSet result) throws Exception {
                        return new TournamentDTO().fromResultSet(result);
                    }
                }
        );

    }

    public TournamentDTO readTournamentById(final int tournamentId) {
        return ConnectionUtil.readDTOsWithCreteria("SELECT id, tname, date, stars, deadline, policy, eligibility FROM tournament where id=?", new PreparedStatementSetter() {
                    @Override
                    public void doAllStuffNeededToPrepareStatement(PreparedStatement pstmt) throws SQLException {
                        pstmt.setInt(1, tournamentId);
                    }
                }, new RowMapper() {
                    @Override
                    public DTO createDTOFromResultSet(ResultSet result) throws Exception {
                        return new TournamentDTO().fromResultSet(result);
                    }
                }
        );
    }

    public int saveTournamentToDB(final TournamentDTO tournamentDTO) {
        ConnectionUtil.update("INSERT INTO tournament( tname, date, stars, deadline, policy, eligibility) VALUES (?, ?, ?, ?, ?, ?)", new PreparedStatementSetter() {
            @Override
            public void doAllStuffNeededToPrepareStatement(PreparedStatement pstmt) throws SQLException {
                pstmt.setString(1, tournamentDTO.gettName());
                pstmt.setString(2, tournamentDTO.getDate());
                pstmt.setInt(3, tournamentDTO.getStars());
                pstmt.setString(4, tournamentDTO.getDeadline());
                pstmt.setString(5, tournamentDTO.getPolicy());
                pstmt.setString(6, tournamentDTO.getEligibility());
            }
        });
        return readTournamentByName(tournamentDTO.gettName()).getId();
    }

    public void updateTournamentInDB(final TournamentDTO tournamentDTO) {
        String query = "UPDATE tournament\n" +
                "   SET tname=?, date=?, stars=?\n, deadline=?, policy=?, eligibility=?" + " WHERE id=?";
        ConnectionUtil.update(query, new PreparedStatementSetter() {
            @Override
            public void doAllStuffNeededToPrepareStatement(PreparedStatement pstmt) throws SQLException {
                pstmt.setString(1, tournamentDTO.gettName());
                pstmt.setString(2, tournamentDTO.getDate());
                pstmt.setInt(3, tournamentDTO.getStars());
                pstmt.setString(4, tournamentDTO.getDeadline());
                pstmt.setString(5, tournamentDTO.getPolicy());
                pstmt.setString(6, tournamentDTO.getEligibility());
                pstmt.setInt(7, tournamentDTO.getId());
            }
        });
    }

    public void deleteTournamentFromDB(final int tournamentId) {
        String query = "DELETE from event where tournamentid=?";
        String query2 = "DELETE from tournament where id=?";
        ConnectionUtil.update(query, new PreparedStatementSetter() {
            @Override
            public void doAllStuffNeededToPrepareStatement(PreparedStatement pstmt) throws SQLException {
                pstmt.setInt(1, tournamentId);
            }
        });
        ConnectionUtil.update(query2, new PreparedStatementSetter() {
            @Override
            public void doAllStuffNeededToPrepareStatement(PreparedStatement pstmt) throws SQLException {
                pstmt.setInt(1, tournamentId);
            }
        });
    }
}
