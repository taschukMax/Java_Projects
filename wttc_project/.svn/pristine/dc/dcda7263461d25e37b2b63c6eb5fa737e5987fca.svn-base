package com.westchestertabletennis.paymentgenerator.controller;

import com.westchestertabletennis.paymentgenerator.dao.EventDAO;
import com.westchestertabletennis.paymentgenerator.dao.TournamentDAO;
import com.westchestertabletennis.paymentgenerator.dto.EventDTO;
import com.westchestertabletennis.paymentgenerator.dto.TournamentDTO;
import org.apache.commons.lang.StringUtils;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.swing.text.StyledEditorKit;
import java.io.IOException;

/**
 * Created with IntelliJ IDEA.
 * User: Maksym
 * Date: 7/9/13
 * Time: 8:18 PM
 * To change this template use File | Settings | File Templates.
 */
public class ServletSaveTournament extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String allEventsSize = request.getParameter("AllEventsSize");
        String hiddenTournamentId = request.getParameter("tournamentid");
        TournamentDTO tournamentDTO = getTournamentDTO(request);
        TournamentDAO dao = new TournamentDAO();
        EventDAO eventDAO = new EventDAO();
        int id = 0;
        boolean newTournament = false;
        if (hiddenTournamentId == null) {
            id = dao.saveTournamentToDB(tournamentDTO);
            newTournament = true;
        } else {
            tournamentDTO.setId(Integer.valueOf(hiddenTournamentId));
            dao.updateTournamentInDB(tournamentDTO);
            id = Integer.valueOf(hiddenTournamentId);
            newTournament = false;
        }

        for (int i = 1; i <= Integer.valueOf(allEventsSize); i++) {
            EventDTO eventDTO = getEventDTO(request, id, i);

            if (newTournament) {
                if (isNotEmpty(eventDTO)) {
                    eventDAO.saveEventToDB(eventDTO);

                }
            } else {
                if (eventDTO.getId() > 0) {
                    if (isNotEmpty(eventDTO)) {
                        eventDAO.updateEventInDB(eventDTO);
                    } else {
                        eventDAO.deleteEmptyEventFromDB(eventDTO);
                    }
                } else {
                    if (isNotEmpty(eventDTO)) {
                        eventDAO.saveEventToDB(eventDTO);
                    }
                }//if no event ID
            }// if not new Tournament
        }//for
        response.sendRedirect("allTournaments");
    }

    private TournamentDTO getTournamentDTO(HttpServletRequest request) {
        String tournamentName = request.getParameter("tournamentName");
        String tournamentDate = request.getParameter("tournamentDate");
        String tournamentStars = request.getParameter("stars");
        TournamentDTO tournamentDTO = new TournamentDTO();
        tournamentDTO.settName(tournamentName);
        tournamentDTO.setDate(tournamentDate);
        tournamentDTO.setStars(Integer.valueOf(tournamentStars));
        return tournamentDTO;
    }

    private EventDTO getEventDTO(HttpServletRequest request, int id, int i) {
        String eventName;
        String eventDate;
        String eventFee;
        String firstPl;
        String secondPl;
        String thirdPl;
        String fifthPl;
        String seventhPl;
        String maxParticipants;
        String usatt;
        String finePrint;
        String hiddentEventId = request.getParameter("eventid" + i);
        String eventOrder;
        String eventTime;
        EventDTO eventDTO = new EventDTO();
        if (StringUtils.isNotEmpty(hiddentEventId)) {
            eventDTO.setId(Integer.valueOf(hiddentEventId));
        }
        eventDTO.setTournamentid(id);
        eventName = request.getParameter("eventName" + i);
        eventDate = request.getParameter("eventDate" + i);
        eventFee = request.getParameter("fee" + i);
        firstPl = request.getParameter("firstPl" + i);
        secondPl = request.getParameter("secondPl" + i);
        thirdPl = request.getParameter("thirdPl" + i);
        fifthPl = request.getParameter("fifthPl" + i);
        seventhPl = request.getParameter("seventhPl" + i);
        maxParticipants = request.getParameter("maxParticipants" + i);
        usatt = request.getParameter("usatt" + i);
        finePrint = request.getParameter("textPrint" + i);
        eventOrder = request.getParameter("event" + i);
        eventTime = request.getParameter("eventTime" + i);
        eventDTO.setEventName(eventName);
        eventDTO.setEventDate(eventDate);
        eventDTO.setFee(eventFee);
        eventDTO.setFirstPl(firstPl);
        eventDTO.setSecondPl(secondPl);
        eventDTO.setThirdPl(thirdPl);
        eventDTO.setFifthPl(fifthPl);
        eventDTO.setSeventhPl(seventhPl);
        if (StringUtils.isNotEmpty(maxParticipants)) {
            eventDTO.setMaxParticipants(Integer.valueOf(maxParticipants));
        }
        if (StringUtils.isNotEmpty(usatt)) {
            if (usatt.equals("on")) {
                usatt = "true";

            } else {
                usatt = "false";
            }
        }
        eventDTO.setUsatt(Boolean.valueOf(usatt));
        eventDTO.setText(finePrint);
        if (StringUtils.isNotEmpty(eventOrder)) {
            eventDTO.setEventOrder(Integer.valueOf(eventOrder));
        }
        if (StringUtils.isNotEmpty(eventTime)) {
            eventDTO.setEventTime(eventTime);
        }
        return eventDTO;
    }

    private boolean isNotEmpty(EventDTO eventDTO) {
        String eventName = eventDTO.getEventName();
        String eventDate = eventDTO.getEventDate();
        String eventFee = eventDTO.getFee();
        int orderEvent = eventDTO.getEventOrder();
        String eventTime = eventDTO.getEventTime();
        return StringUtils.isNotEmpty(eventName) && StringUtils.isNotEmpty(eventDate) && StringUtils.isNotEmpty(eventFee) && StringUtils.isNotEmpty(eventTime) && orderEvent > 0;
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

    }
}
